{"version":3,"sources":["queries/single-species.js","queries/single-species-with-nested.js","queries/all-species.js","queries/all-species-with-nested.js","app.js","index.js"],"names":["name","text","Search","Input","TabPane","Tabs","inlineData","character","characters","species","planet","planets","inlineQueryResolver","createQueryResolver","primaryKey","jsonFilePath","nested","homeworld","parentKey","from","foreignKey","exampleQueries","require","default","createEntitiesSchema","entitiesSchema","datasets","entityName","type","properties","args","additionalProperties","resolve","data","DataTable","searchText","columnNames","Object","keys","map","columnName","key","filter","record","value","t","isString","toLowerCase","includes","trim","filterData","App","defaultQuery","useState","queryText","setQueryText","undefined","queryResult","setQueryResult","showDataExplorer","setShowDataExplorer","showHeader","setShowHeader","monacoEditor","setMonacoEditor","executeQuery","a","query","json5","parse","console","log","miniql","result","error","stack","useEffect","requestAnimationFrame","layout","className","size","icon","UpOutlined","DownOutlined","onClick","target","href","tab","mode","exampleQuery","Item","CaretRightFilled","language","onChange","options","minimap","enabled","contextmenu","automaticLayout","editorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","allowComments","schemas","fileMatch","schema","get","editorDidMount","editor","src","setSearchText","enterButton","placeholder","onSearch","style","width","CloseOutlined","dataset","DataTables","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90524429.chunk.js","sourcesContent":["\r\nexport default {\r\n    name: \"1. Single species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"species\": {\r\n            \"args\": {\r\n                // Gets a single species with this name.\r\n                \"name\": \"Hutt\"\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\r\nexport default {\r\n    name: \"2. Single species with nested\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"species\": {\r\n            \"args\": {\r\n                // Gets a single species with this name.\r\n                \"name\": \"Hutt\"\r\n            },\r\n            \"resolve\": {\r\n                // Nested \"planet\" entity to resolve.\r\n                \"homeworld\": { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}","\r\nexport default {\r\n    name: \"3. All species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"species\": {\r\n            // Arguments are omitted to get all species.\r\n        }\r\n    }\r\n}\r\n`\r\n}","\r\nexport default {\r\n    name: \"4. All species with nested\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        // Get all species.\r\n        \"species\": { \r\n            \"resolve\": {\r\n                // Nested \"planet\" entity to resolve.\r\n                \"homeworld\": { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}","import React, { useState, useEffect } from 'react';\nimport './app.css';\nimport * as characters from \"./data/characters.json\";\nimport * as species from \"./data/species.json\";\nimport * as planets from \"./data/planets.json\";\nimport { Input, Button, Tabs, Menu, PageHeader } from 'antd';\nimport t from 'typy';\nimport { CloseOutlined, CaretRightFilled, CaretDownOutlined, DownOutlined, UpOutlined } from '@ant-design/icons';\nimport ReactJson from \"react-json-view\";\nimport json5 from \"json5\";\nimport { miniql } from \"miniql\";\nimport { createQueryResolver } from \"@miniql/inline\";\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Space from 'react-spaces';\nconst { Search } = Input;\nconst { TabPane } = Tabs;\n\n//\n// Renders the application.\n//\nfunction App() {\n    const defaultQuery = exampleQueries[0];\n    const [queryText, setQueryText] = useState(defaultQuery.text);\n    const [queryResult, setQueryResult] = useState(undefined);\n    const [showDataExplorer, setShowDataExplorer] = useState(true);\n    const [showHeader, setShowHeader] = useState(true);\n    const [monacoEditor, setMonacoEditor] = useState(undefined); //TODO: This shouldn't be state.\n\n    //\n    // Execute a query and display the results.\n    //\n    async function executeQuery(queryText) {\n        try {\n            const query = json5.parse(queryText);\n            console.log(\"Executing query:\");\n            console.log(query);\n            const result = await miniql(query, inlineQueryResolver, {});\n            console.log(\"Setting query result:\");\n            console.log(result);\n            setQueryResult(result);\n        }\n        catch (err) {\n            console.error(\"An error occured running the query:\");\n            console.error(err && err.stack || err);\n            setQueryResult({ error: err });\n        }\n    }\n\n    if (queryResult === undefined) {\n        executeQuery(defaultQuery.text);\n    }\n\n    //\n    // Function called before Monaco Editor mounts.\n    //\n    function editorWillMount(monaco) {\n        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            validate: true,\n            allowComments: true,\n            schemas: [{\n                fileMatch: ['*'],\n                schema: createJsonSchema(),\n            }]\n        });\n    } \n\n    //\n    // Function called when Monaco Editor mounts.\n    //\n    function editorDidMount(editor, monaco) {\n        setMonacoEditor(editor);\n    }    \n\n    function layoutEditor() {\n        requestAnimationFrame(() => { // This is a hack to make sure the DOM has finished rendering before resizing the editor.\n            if (monacoEditor) {\n                monacoEditor.layout();\n            }\n        });\n    }\n\n    useEffect(() => {\n        layoutEditor(); // Re-layout the editor when panels are resized.\n    }, [showDataExplorer]);\n\n    return (\n        <Space.ViewPort>\n            <Space.Top\n                className=\"pt-2 pl-2 pr-2\"\n                size={showHeader ? \"12em\" : \"5em\"}\n                >\n                <div\n                    className=\"bg-white\"\n                    >\n                    <div \n                        className=\"flex flex-row items-center pt-3 pl-4 pr-4\"\n                        >\n                        <h1>MiniQL interactive example</h1>\n                        <Button\n                            className=\"ml-4 mb-2\"\n                            icon={showHeader ? <UpOutlined /> : <DownOutlined /> }\n                            onClick={() => {\n                                setShowHeader(!showHeader);\n                            }}\n                            />\n                        \n                    </div>\n                    <div className=\"p-4 flex flex-row border-0 border-t-4 border-gray-300 border-solid\">\n                        <div>\n                            <p>\n                                MiniQL is a tiny JSON-based query language inspired by GraphQL.\n                            </p>\n\n                            <p>\n                                Best viewed on desktop.\n                            </p>\n                        </div>\n\n                        <div className=\"ml-4\">\n                            <p>\n                                <a target=\"_blank\" href=\"https://github.com/miniql/miniql\">Learn more about MiniQL</a>. \n                                <a className=\"ml-2\" target=\"_blank\" href=\"https://github.com/miniql/miniql-interactive-example\">See the tech used in this example</a>.  \n                            </p>\n\n                            <p>\n                                This example allows you to make queries against <a target=\"_blank\" href=\"https://www.kaggle.com/jsphyg/star-wars/data\">Star Wars universe data</a>.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </Space.Top>\n            <Space.Fill>\n                <Space.Left size=\"18em\" className=\"pl-2 pt-2\">\n                    <Tabs type=\"card\">\n                        <TabPane \n                            tab=\"Sample queries\"\n                            className=\"p-1\"\n                            >\n                            <Menu \n                                mode=\"vertical\"\n                                >\n                                {exampleQueries.map(exampleQuery => (\n                                    <Menu.Item\n                                        className=\"border-0 border-b border-solid border-gray-300\"\n                                        key={exampleQuery.name}\n                                        onClick={() => setQueryText(exampleQuery.text)}\n                                        >\n                                        {exampleQuery.name}\n                                    </Menu.Item>\n                                ))}\n                            </Menu>\n                        </TabPane>\n                    </Tabs>\n                </Space.Left>\n\n                <Space.Fill>\n                    <Space.Left size=\"50%\" className=\"pl-2 pt-2\">\n                        <Tabs type=\"card\">\n                            <TabPane \n                                tab={(\n                                    <div className=\"flex flex-row items-center\">\n                                        <div>\n                                            Query \n                                        </div>\n                                        <Button\n                                            className=\"ml-4 pl-2\"\n                                            icon={<CaretRightFilled />}\n                                            onClick={() => executeQuery(queryText)}\n                                            />\n                                    </div>\n                                )}\n                                className=\"p-1\"\n                                >\n                                <MonacoEditor\n                                    language=\"json\"\n                                    value={queryText}\n                                    onChange={setQueryText}\n                                    options={{\n                                        minimap: {\n                                            enabled: false,\n                                        },\n                                        contextmenu: false,\n                                        automaticLayout: true,\n                                    }}\n                                    editorWillMount={editorWillMount}\n                                    editorDidMount={editorDidMount}\n                                    />\n                            </TabPane>\n                        </Tabs>\n                    </Space.Left>\n\n                    <Space.Right size=\"50%\" className=\"pl-2 pr-2 pt-2\">\n                        <Tabs type=\"card\">\n                            <TabPane tab=\"Query Result\" className=\"h-full p-2\">\n                                <div className=\"p-1 h-full overflow-auto\">\n                                    <ReactJson\n                                        className=\"p-1 h-full\"\n                                        src={queryResult}\n                                        />\n                                </div>\n                            </TabPane>\n                        </Tabs>\n                    </Space.Right>\n                </Space.Fill>\n            </Space.Fill>\n            <Space.Bottom \n                className=\"p-2\"\n                size={showDataExplorer ? \"25em\" : \"5em\"}\n                >\n                <Tabs type=\"card\" size=\"small\">\n                    <TabPane \n                        tab={(\n                            <div className=\"flex flex-row items-center\">\n                                <div>\n                                    Data explorer\n                                </div>\n                                <Button\n                                    className=\"ml-4 pl-2\"\n                                    icon={showDataExplorer ? <DownOutlined /> : <UpOutlined /> }\n                                    onClick={() => {\n                                        setShowDataExplorer(!showDataExplorer);\n                                    }}\n                                    />\n                            </div>\n                        )}\n                        className=\"p-2\"\n                        >\n                        {DataTables()}\n                    </TabPane>\n                </Tabs>\n            </Space.Bottom>\n        </Space.ViewPort>\n    );\n}\n\n\n//\n// Configures the query resolver.\n//\nconst jsonQueryResolverConfig = {\n    character: {\n        primaryKey: \"name\",\n        jsonFilePath: \"./data/planets.json\",\n        nested: {\n            homeworld: {\n                parentKey: \"homeworld\",\n                from: \"planet\",\n            },\n            species: {\n                parentKey: \"species\",\n            },\n        },\n    },\n    species: {\n        primaryKey: \"name\",\n        nested: {\n            homeworld: {\n                parentKey: \"homeworld\",\n                from: \"planet\",\n            },\n        },\n    },\n    planet: {\n        primaryKey: \"name\",\n        nested: {\n            species: {\n                foreignKey: \"homeworld\",\n            },\n        },\n    },\n};\n\n//\n// Inline data to run queries against.\n//\nconst inlineData = {\n    character: characters.default,\n    species: species.default,\n    planet: planets.default,\n};\n\n//\n// Resolves MiniQL queryies.\n//\nconst inlineQueryResolver = createQueryResolver(jsonQueryResolverConfig, inlineData);\n\n//\n// Example queries that can be put in the query editor.\n//\nconst exampleQueries = [\n    require(`./queries/single-species`).default,\n    require(`./queries/single-species-with-nested`).default,\n    require(`./queries/all-species`).default,\n    require(`./queries/all-species-with-nested`).default,\n];\n\n//\n// Creates a JSON schema for our data format.\n// This function returns a JSON schema: https://json-schema.org/understanding-json-schema/\n//\nfunction createJsonSchema() {\n    return {\n        type: \"object\",\n        properties: {\n            get: {\n                type: \"object\",\n                properties: createEntitiesSchema(),\n                additionalProperties: false,\n            },\n            additionalProperties: false,\n        },\n        additionalProperties: false,\n    };\n}\n\n//\n// Create JSON schemas for all the entities.\n// This function returns a JSON schema: https://json-schema.org/understanding-json-schema/\n//\nfunction createEntitiesSchema() {\n    const entitiesSchema = {};\n    for (const dataset of datasets) {\n        entitiesSchema[dataset.entityName] = {\n            type: \"object\",\n            properties: {\n                args: {\n                    type: \"object\",\n                    properties: {\n                        name: {\n                            type: \"string\",\n                        },\n                    },\n                    additionalProperties: false,\n                },\n                resolve: {\n                    type: \"object\",\n                    //TODO: Flesh this out further according to what can be resolved.\n                },  \n            },\n            additionalProperties: false,\n        };\n    }\n\n    return entitiesSchema;\n}\n\n//\n// Datasets that can be queried.\n//\nconst datasets = [\n    { \n        name: \"Characters\", \n        entityName: \"character\",\n        data: characters,\n    }, \n    { \n        name: \"Species\", \n        entityName: \"species\",\n        data: species,\n    }, \n    { \n        name: \"Planets\", \n        entityName: \"planet\",\n        data: planets,\n    }, \n];\n\n//\n// Renders the data tables.\n//\nfunction DataTables() {\n    const [searchText, setSearchText] = useState(\"\");\n\n    return (\n        <div className=\"h-full\">\n            <div className=\"ml-3 mt-2 flex flex-row items-center\">\n                <Search\n                    enterButton=\"Search\"\n                    placeholder=\"Enter search text\"\n                    onSearch={setSearchText}\n                    style={{\n                        width: \"400px\",\n                    }}\n                    />\n\n                {searchText !== \"\"\n                    && <Button\n                        className=\"ml-1\"\n                        icon={<CloseOutlined />}\n                        onClick={() => setSearchText(\"\")}\n                        >\n                    </Button>\n                }\n            </div>\n\n            <div className=\"m-4 h-full\">\n                <Tabs size=\"small\">\n                    {datasets.map(dataset => \n                        <TabPane tab={dataset.name} key={dataset.name}>\n                            <div className=\"pt-4 h-full overflow-auto\">\n                                <DataTable\n                                    searchText={searchText}\n                                    data={dataset.data.default}\n                                    />\n                            </div>\n                        </TabPane>\n                    )}\n                </Tabs>\n            </div>\n        </div>\n    );\n}\n\n//\n// Renders a data table.\n//\nfunction DataTable({ searchText, data }) {\n    const columnNames = Object.keys(data[0]);\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    {columnNames.map(columnName => \n                        <th key={columnName}>\n                            {columnName}\n                        </th>\n                    )}\n                </tr>\n            </thead>\n            <tbody>\n                {data\n                    .filter(filterData(searchText, columnNames))\n                    .map(record => \n                        <tr key={record.name}>\n                            {columnNames.map(columnName => \n                                <td key={`${record.name}-${columnName}`}>\n                                    {record[columnName]}\n                                </td>\n                            )}\n                        </tr>\n                    )\n                }\n            </tbody>\n        </table>\n    );\n}\n\n//\n// Helper function to filter data.\n//\nfunction filterData(searchText, columnNames) {\n    return record => {\n        if (searchText === \"\") {\n            return true;\n        }\n        else {\n            for (const columnName of columnNames) {\n                const value = record[columnName];\n                if (t(value).isString) {\n                    if (value.toLowerCase().includes(searchText.trim().toLowerCase())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    };\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.output.css';\nimport App from './app';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}