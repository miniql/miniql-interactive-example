{"version":3,"sources":["queries/single-species.js","queries/single-species-with-nested.js","queries/all-species.js","queries/all-species-with-nested.js","app.js","index.js"],"names":["name","text","Search","Input","TabPane","Tabs","TextArea","inlineData","character","characters","species","planet","planets","inlineQueryResolver","createQueryResolver","primaryKey","jsonFilePath","nested","homeworld","parentKey","from","foreignKey","exampleQueries","require","default","DataTable","searchText","data","columnNames","Object","keys","map","columnName","key","filter","record","value","t","isString","toLowerCase","includes","trim","filterData","App","defaultQuery","useState","queryText","setQueryText","undefined","queryResult","setQueryResult","showDataExplorer","setShowDataExplorer","executeQuery","a","query","json5","parse","console","log","miniql","result","error","stack","className","type","tab","mode","style","width","exampleQuery","Item","onClick","icon","CaretRightFilled","language","onChange","options","minimap","enabled","src","height","DownOutlined","setSearchText","datasets","enterButton","placeholder","onSearch","CloseOutlined","dataset","DataTables","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5988107f.chunk.js","sourcesContent":["\r\nexport default {\r\n    name: \"Single species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    get: {\r\n        species: {\r\n            args: {\r\n                // Sets the name of the species to get.\r\n                name: \"Hutt\"\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\r\nexport default {\r\n    name: \"Single species with nested\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    get: {\r\n        species: {\r\n            args: {\r\n                name: \"Hutt\"\r\n            }\r\n            resolve: {\r\n                // Nested \"planet\" entity to resolve.\r\n                homeworld: { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}","\r\nexport default {\r\n    name: \"All species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    get: {\r\n        species: {\r\n            // Arguments are omitted to get all species.\r\n        }\r\n    }\r\n}\r\n`\r\n}","\r\nexport default {\r\n    name: \"All species with nested\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    get: {\r\n        species: {\r\n            resolve: {\r\n                // Nested \"planet\" entity to resolve.\r\n                homeworld: { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}","import React, { useState } from 'react';\nimport './app.css';\nimport * as characters from \"./data/characters.json\";\nimport * as species from \"./data/species.json\";\nimport * as planets from \"./data/planets.json\";\nimport { Input, Button, Tabs, Menu } from 'antd';\nimport t from 'typy';\nimport { CloseOutlined, CaretRightFilled, CaretDownOutlined, DownOutlined } from '@ant-design/icons';\nimport ReactJson from \"react-json-view\";\nimport json5 from \"json5\";\nimport { miniql } from \"miniql\";\nimport { createQueryResolver } from \"@miniql/inline\";\nimport MonacoEditor from 'react-monaco-editor';\nconst { Search } = Input;\nconst { TabPane } = Tabs;\nconst { TextArea } = Input;\n\n//\n// Renders the application.\n//\nfunction App() {\n    const defaultQuery = exampleQueries[0];\n    const [queryText, setQueryText] = useState(defaultQuery.text);\n    const [queryResult, setQueryResult] = useState(undefined);\n    const [showDataExplorer, setShowDataExplorer] = useState(true);\n\n    //\n    // Execute a query and display the results.\n    //\n    async function executeQuery(queryText) {\n        try {\n            const query = json5.parse(queryText);\n            console.log(\"Executing query:\");\n            console.log(query);\n            const result = await miniql(query, inlineQueryResolver, {});\n            console.log(\"Setting query result:\");\n            console.log(result);\n            setQueryResult(result);\n        }\n        catch (err) {\n            console.error(\"An error occured running the query:\");\n            console.error(err && err.stack || err);\n            setQueryResult({ error: err });\n        }\n    }\n\n    if (queryResult === undefined) {\n        executeQuery(defaultQuery.text);\n    }\n\n    return (\n        <div className=\"flex flex-col p-8 h-screen\">\n            <div \n                className=\"flex flex-row flex-grow\"\n                >\n                <div className=\"h-full\">\n                    <Tabs type=\"card\">\n                        <TabPane \n                            tab=\"Sample queries\"\n                            className=\"p-1\"\n                            >\n                            <Menu \n                                mode=\"vertical\"\n                                style={{\n                                    width: \"200px\",\n                                }}\n                                >\n                                {exampleQueries.map(exampleQuery => (\n                                    <Menu.Item\n                                        className=\"border-0 border-b border-solid border-gray-300\"\n                                        key={exampleQuery.name}\n                                        onClick={() => setQueryText(exampleQuery.text)}\n                                        >\n                                        {exampleQuery.name}\n                                    </Menu.Item>\n                                ))}\n                            </Menu>\n                        </TabPane>\n                    </Tabs>\n                </div>\n                <div className=\"ml-1 w-1/2 h-full\">\n                    <Tabs type=\"card\">\n                        <TabPane \n                            tab={(\n                                <div className=\"flex flex-row items-center\">\n                                    <div>\n                                        Query \n                                    </div>\n                                    <Button\n                                        className=\"ml-4 pl-2\"\n                                        icon={<CaretRightFilled />}\n                                        onClick={() => executeQuery(queryText)}\n                                        />\n                                </div>\n                            )}\n                            className=\"p-1\"\n                            >\n                            <div className=\"p-1 h-full overflow-auto\">\n                                <div className=\"h-full w-full flex flex-row\">\n                                    <div className=\"h-full flex-grow\">\n                                        {/* <TextArea \n                                            style={{\n                                                height: \"100%\",\n                                            }}\n                                            value={queryText}\n                                            onChange={e => setQueryText(e.currentTarget.value)}\n                                            /> */}\n\n                                        <MonacoEditor\n                                            language=\"json\"\n                                            value={queryText}\n                                            onChange={setQueryText}\n                                            options={{\n                                                minimap: {\n                                                    enabled: false,\n                                                },\n                                            }}\n                                            />\n                                    </div>\n                                </div>\n                            </div>\n                        </TabPane>\n                    </Tabs>\n                </div>\n                <div className=\"ml-1 w-1/2 h-full\">\n                    <Tabs type=\"card\">\n                        <TabPane tab=\"Query Result\" className=\"p-2\">\n                            <div className=\"p-1 h-full overflow-auto border border-solid border-gray-400\">\n                                <ReactJson\n                                    className=\"p-1\"\n                                    src={queryResult}\n                                    />\n                            </div>\n                        </TabPane>\n                    </Tabs>\n                </div>\n            </div>\n            \n            <Tabs \n                className=\"mt-2\"\n                type=\"card\"\n                style={{\n                    height: showDataExplorer ? \"40%\" : \"3.8em\",\n                }}\n                >\n                <TabPane \n                    tab={(\n                        <div className=\"flex flex-row items-center\">\n                            <div>\n                                Data explorer\n                            </div>\n                            <Button\n                                className=\"ml-4 pl-2\"\n                                icon={<DownOutlined />}\n                                onClick={() => {\n                                    setShowDataExplorer(!showDataExplorer);\n                                }}\n                                />\n                        </div>\n                    )}\n                    className=\"p-2\"\n                    >\n                    {DataTables()}\n                </TabPane>\n            </Tabs>\n        </div>\n    );\n}\n\n//\n// Configures the query resolver.\n//\nconst jsonQueryResolverConfig = {\n    character: {\n        primaryKey: \"name\",\n        jsonFilePath: \"./data/planets.json\",\n        nested: {\n            homeworld: {\n                parentKey: \"homeworld\",\n                from: \"planet\",\n            },\n            species: {\n                parentKey: \"species\",\n            },\n        },\n    },\n    species: {\n        primaryKey: \"name\",\n        nested: {\n            homeworld: {\n                parentKey: \"homeworld\",\n                from: \"planet\",\n            },\n        },\n    },\n    planet: {\n        primaryKey: \"name\",\n        nested: {\n            species: {\n                foreignKey: \"homeworld\",\n            },\n        },\n    },\n};\n\n//\n// Inline data to run queries against.\n//\nconst inlineData = {\n    character: characters.default,\n    species: species.default,\n    planet: planets.default,\n};\n\n//\n// Resolves MiniQL queryies.\n//\nconst inlineQueryResolver = createQueryResolver(jsonQueryResolverConfig, inlineData);\n\n//\n// Example queries that can be put in the query editor.\n//\nconst exampleQueries = [\n    require(`./queries/single-species`).default,\n    require(`./queries/single-species-with-nested`).default,\n    require(`./queries/all-species`).default,\n    require(`./queries/all-species-with-nested`).default,\n];\n\n//\n// Renders the data tables.\n//\nfunction DataTables() {\n    const [searchText, setSearchText] = useState(\"\");\n\n    const datasets = [\n        { name: \"Characters\", data: characters }, \n        { name: \"Species\", data: species }, \n        { name: \"Planets\", data: planets }, \n    ];\n\n    return (\n        <div className=\"h-full\">\n            <div className=\"ml-3 mt-2 flex flex-row items-center\">\n                <Search\n                    enterButton=\"Search\"\n                    placeholder=\"Enter search text\"\n                    onSearch={setSearchText}\n                    style={{\n                        width: \"400px\",\n                    }}\n                    />\n\n                {searchText !== \"\"\n                    && <Button\n                        className=\"ml-1\"\n                        icon={<CloseOutlined />}\n                        onClick={() => setSearchText(\"\")}\n                        >\n                    </Button>\n                }\n            </div>\n\n            <div className=\"m-4 h-full\">\n                <Tabs>\n                    {datasets.map(dataset => \n                        <TabPane tab={dataset.name} key={dataset.name}>\n                            <div className=\"pt-4 h-full overflow-auto\">\n                                <DataTable\n                                    searchText={searchText}\n                                    data={dataset.data.default}\n                                    />\n                            </div>\n                        </TabPane>\n                    )}\n                </Tabs>\n            </div>\n        </div>\n    );\n}\n\n//\n// Renders a data table.\n//\nfunction DataTable({ searchText, data }) {\n    const columnNames = Object.keys(data[0]);\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    {columnNames.map(columnName => \n                        <th key={columnName}>\n                            {columnName}\n                        </th>\n                    )}\n                </tr>\n            </thead>\n            <tbody>\n                {data\n                    .filter(filterData(searchText, columnNames))\n                    .map(record => \n                        <tr key={record.name}>\n                            {columnNames.map(columnName => \n                                <td key={`${record.name}-${columnName}`}>\n                                    {record[columnName]}\n                                </td>\n                            )}\n                        </tr>\n                    )\n                }\n            </tbody>\n        </table>\n    );\n}\n\n//\n// Helper function to filter data.\n//\nfunction filterData(searchText, columnNames) {\n    return record => {\n        if (searchText === \"\") {\n            return true;\n        }\n        else {\n            for (const columnName of columnNames) {\n                const value = record[columnName];\n                if (t(value).isString) {\n                    if (value.toLowerCase().includes(searchText.trim().toLowerCase())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    };\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.output.css';\nimport App from './app';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}