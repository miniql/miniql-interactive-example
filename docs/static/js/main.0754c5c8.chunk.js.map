{"version":3,"sources":["queries/get-vader.js","queries/get-vader-with-homeworld.js","queries/get-vader-with-homeworld-and-species.js","queries/get-vader-with-homeworld-and-nested-characters.js","queries/get-hutt-species.js","queries/get-all-species.js","queries/get-all-species-with-homeworld.js","app.js","index.js"],"names":["name","text","Search","Input","TabPane","Tabs","onDesktop","window","matchMedia","matches","inlineData","character","characters","species","planet","planets","inlineQueryResolver","createQueryResolver","entities","primaryKey","jsonFilePath","nested","homeworld","from","foreignKey","multiple","parentKey","verbose","exampleQueries","require","default","createEntitiesSchema","entitiesSchema","datasets","entityName","type","properties","args","additionalProperties","resolve","data","DataTable","searchText","columnNames","Object","keys","map","columnName","key","filter","record","value","t","isString","toLowerCase","includes","trim","filterData","App","defaultQuery","useState","queryText","setQueryText","undefined","queryResult","setQueryResult","showDataExplorer","setShowDataExplorer","showHeader","setShowHeader","showSampleQueries","setShowSampleQueries","monacoEditor","setMonacoEditor","executeQuery","a","query","json5","parse","console","log","miniql","result","error","stack","serializeError","useEffect","requestAnimationFrame","layout","className","size","icon","UpOutlined","DownOutlined","onClick","target","href","tab","LeftOutlined","RightOutlined","mode","exampleQuery","Item","CaretRightFilled","language","onChange","options","minimap","enabled","contextmenu","automaticLayout","editorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","allowComments","schemas","fileMatch","schema","get","editorDidMount","editor","src","setSearchText","enterButton","placeholder","onSearch","style","width","CloseOutlined","dataset","DataTables","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0754c5c8.chunk.js","sourcesContent":["\r\nexport default {\r\n    name: \"1. Get Darth Vader\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"character\": {\r\n            \"args\": {\r\n\r\n                // Gets Darth Vader by name.\r\n                \"name\": \"Darth Vader\"\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\r\nexport default {\r\n    name: \"2. Vader > Homeworld\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"character\": {\r\n            \"args\": {\r\n                \"name\": \"Darth Vader\"\r\n            },\r\n            \"resolve\": {\r\n\r\n                // Gets Darth Vader's homeworld.\r\n                \"homeworld\": { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\r\nexport default {\r\n    name: \"3. Vader > Homeworld + Species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"character\": {\r\n            \"args\": {\r\n                \"name\": \"Darth Vader\"\r\n            },\r\n            \"resolve\": {\r\n                \"homeworld\": { \r\n                },\r\n\r\n                // Get's Darth Vader's species.\r\n                \"species\": { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\r\nexport default {\r\n    name: \"4. Vader > Homeworld > Characters\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n// !! This query doesn't work yet !!\r\n\r\n{\r\n    \"get\": {\r\n        \"character\": {\r\n            \"args\": {\r\n                \"name\": \"Darth Vader\"\r\n            },\r\n            \"resolve\": {\r\n                \r\n                \"homeworld\": { \r\n                    \"resolve\": {\r\n\r\n                        // Gets all characters from Darth Vader's homeworld.\r\n                        \"characters\": { \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}\r\n","\nexport default {\n    name: \"5. Get the Hutt species\",\n    text:\n`\n// This is JSON5: https://json5.org/\n\n{\n    \"get\": {\n        \"species\": {\n            \"args\": {\n                \n                // Gets the Hutt species.\n                \"name\": \"Hutt\"\n            }\n        }\n    }\n}\n`\n}\n","\r\nexport default {\r\n    name: \"6. Get all species\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"species\": {\r\n            \r\n            // Gets all species, because no \"args\".\r\n        }\r\n    }\r\n}\r\n`\r\n}","\r\nexport default {\r\n    name: \"7. Get all species > Homeworld\",\r\n    text:\r\n`\r\n// This is JSON5: https://json5.org/\r\n\r\n{\r\n    \"get\": {\r\n        \"species\": { \r\n            \"resolve\": {\r\n                \r\n                // Gets the homeworld for each species.\r\n                \"homeworld\": { \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n}","import React, { useState, useEffect } from 'react';\nimport './app.css';\nimport * as characters from \"./data/characters.json\";\nimport * as species from \"./data/species.json\";\nimport * as planets from \"./data/planets.json\";\nimport { Input, Button, Tabs, Menu } from 'antd';\nimport t from 'typy';\nimport { CloseOutlined, CaretRightFilled, DownOutlined, UpOutlined, RightOutlined, LeftOutlined } from '@ant-design/icons';\nimport ReactJson from \"react-json-view\";\nimport json5 from \"json5\";\nimport { miniql } from \"miniql\";\nimport { createQueryResolver } from \"@miniql/inline\";\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Space from 'react-spaces';\nimport { serializeError } from 'serialize-error';\nconst { Search } = Input;\nconst { TabPane } = Tabs;\n\nconst mediaQuery = window.matchMedia(`(min-width: 1000px)`);\nconst onDesktop = mediaQuery.matches;\n\n//\n// Renders the application.\n//\nfunction App() {\n    const defaultQuery = exampleQueries[0];\n    const [queryText, setQueryText] = useState(defaultQuery.text);\n    const [queryResult, setQueryResult] = useState(undefined);\n    const [showDataExplorer, setShowDataExplorer] = useState(onDesktop);\n    const [showHeader, setShowHeader] = useState(onDesktop);\n    const [showSampleQueries, setShowSampleQueries] = useState(onDesktop);\n    const [monacoEditor, setMonacoEditor] = useState(undefined); //TODO: This shouldn't be state.\n\n    //\n    // Execute a query and display the results.\n    //\n    async function executeQuery(queryText) {\n        try {\n            const query = json5.parse(queryText);\n            console.log(\"Executing query:\");\n            console.log(query);\n            const result = await miniql(query, inlineQueryResolver, { verbose: true });\n            console.log(\"Setting query result:\");\n            console.log(result);\n            setQueryResult(result);\n        }\n        catch (err) {\n            console.error(\"An error occured running the query:\");\n            console.error(err && err.stack || err);\n            setQueryResult({ error: serializeError(err) });\n        }\n    }\n\n    if (queryResult === undefined) {\n        executeQuery(defaultQuery.text);\n    }\n\n    //\n    // Function called before Monaco Editor mounts.\n    //\n    function editorWillMount(monaco) {\n        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            validate: true,\n            allowComments: true,\n            schemas: [{\n                fileMatch: ['*'],\n                schema: createJsonSchema(),\n            }]\n        });\n    } \n\n    //\n    // Function called when Monaco Editor mounts.\n    //\n    function editorDidMount(editor, monaco) {\n        setMonacoEditor(editor);\n    }    \n\n    function layoutEditor() {\n        requestAnimationFrame(() => { // This is a hack to make sure the DOM has finished rendering before resizing the editor.\n            if (monacoEditor) {\n                monacoEditor.layout();\n            }\n        });\n    }\n\n    useEffect(() => {\n        layoutEditor(); // Re-layout the editor when panels are resized.\n    }, [showDataExplorer, showHeader, showSampleQueries]);\n\n    return (\n        <Space.ViewPort>\n            <Space.Top\n                className=\"pt-2 pl-2 pr-2\"\n                size={showHeader ? (onDesktop ? \"14.75em\" : \"20em\") : \"7.5em\"}\n                >\n                <div\n                    className=\"bg-white\"\n                    >\n                    <div \n                        className=\"flex flex-row items-start pt-3 pl-4 pr-4 pb-1\"\n                        >\n                        <Button\n                            className=\"mr-4 mb-2 mt-2\"\n                            icon={showHeader ? <UpOutlined /> : <DownOutlined /> }\n                            onClick={() => {\n                                setShowHeader(!showHeader);\n                            }}\n                            />\n                        <div className=\"flex flex-col\">\n                            <h1>MiniQL interactive example</h1>\n                            <div>\n                                Best viewed on desktop.\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"pl-16 p-4 border-0 border-t-4 border-gray-300 border-solid\">\n                        <div>\n                            MiniQL is a tiny JSON-based query language inspired by GraphQL.\n                        </div>\n\n                        <a target=\"_blank\" href=\"https://github.com/miniql/miniql\">Learn more about MiniQL</a>. \n                        <a className=\"ml-2\" target=\"_blank\" href=\"https://github.com/miniql/miniql-interactive-example\">See the tech used in this example</a>.  \n\n                        <div>\n                            This example allows you to make queries against <a target=\"_blank\" href=\"https://www.kaggle.com/jsphyg/star-wars/data\">Star Wars universe data</a>.\n                        </div>\n                    </div>\n                </div>\n            </Space.Top>\n            <Space.Fill>\n                <Space.Left \n                    size={showSampleQueries ? \"20em\" : \"5em\"}\n                    className=\"pl-2 pt-2 overflow-hidden\"\n                    >\n                    <Tabs type=\"card\">\n                        <TabPane \n                            tab={(\n                                <div className=\"flex flex-row items-center\">\n                                    <Button\n                                        className=\"mr-2 pl-2\"\n                                        icon={showSampleQueries ? <LeftOutlined /> : <RightOutlined />}\n                                        onClick={() => {\n                                            setShowSampleQueries(!showSampleQueries);\n                                        }}\n                                        />\n                                    {showSampleQueries \n                                        && <div>\n                                            Sample queries\n                                        </div>\n                                    }\n                                </div>\n                            )}\n                            className=\"p-1 overflow-y-auto\"\n                            >\n                            <Menu \n                                mode=\"vertical\"\n                                >\n                                {exampleQueries.map(exampleQuery => (\n                                    <Menu.Item\n                                        className=\"border-0 border-b border-solid border-gray-300\"\n                                        key={exampleQuery.name}\n                                        onClick={() => setQueryText(exampleQuery.text)}\n                                        >\n                                        {exampleQuery.name}\n                                    </Menu.Item>\n                                ))}\n                            </Menu>\n                        </TabPane>\n                    </Tabs>\n                </Space.Left>\n\n                <Space.Fill>\n                    <Space.Left size=\"50%\" className=\"pl-2 pt-2\">\n                        <Tabs type=\"card\">\n                            <TabPane \n                                tab={(\n                                    <div className=\"flex flex-row items-center\">\n                                        <div>\n                                            Query \n                                        </div>\n                                        <Button\n                                            className=\"ml-4 pl-2\"\n                                            icon={<CaretRightFilled />}\n                                            onClick={() => executeQuery(queryText)}\n                                            />\n                                    </div>\n                                )}\n                                className=\"p-1\"\n                                >\n                                <MonacoEditor\n                                    language=\"json\"\n                                    value={queryText}\n                                    onChange={setQueryText}\n                                    options={{\n                                        minimap: {\n                                            enabled: false,\n                                        },\n                                        contextmenu: false,\n                                        automaticLayout: true,\n                                    }}\n                                    editorWillMount={editorWillMount}\n                                    editorDidMount={editorDidMount}\n                                    />\n                            </TabPane>\n                        </Tabs>\n                    </Space.Left>\n\n                    <Space.Right size=\"50%\" className=\"pl-2 pr-2 pt-2\">\n                        <Tabs type=\"card\">\n                            <TabPane tab=\"Query Result\" className=\"h-full p-2\">\n                                <div className=\"p-1 h-full overflow-auto\">\n                                    <ReactJson\n                                        className=\"p-1 h-full\"\n                                        src={queryResult}\n                                        />\n                                </div>\n                            </TabPane>\n                        </Tabs>\n                    </Space.Right>\n                </Space.Fill>\n            </Space.Fill>\n            <Space.Bottom \n                className=\"p-2\"\n                size={showDataExplorer ? \"25em\" : \"5em\"}\n                >\n                <Tabs type=\"card\" size=\"small\">\n                    <TabPane \n                        tab={(\n                            <div className=\"flex flex-row items-center\">\n                                <div>\n                                    Data explorer\n                                </div>\n                                <Button\n                                    className=\"ml-4 pl-2\"\n                                    icon={showDataExplorer ? <DownOutlined /> : <UpOutlined /> }\n                                    onClick={() => {\n                                        setShowDataExplorer(!showDataExplorer);\n                                    }}\n                                    />\n                            </div>\n                        )}\n                        className=\"p-2\"\n                        >\n                        {DataTables()}\n                    </TabPane>\n                </Tabs>\n            </Space.Bottom>\n        </Space.ViewPort>\n    );\n}\n\n\n//\n// Configures the query resolver.\n//\nconst jsonQueryResolverConfig = {\n    entities: {\n        character: {\n            primaryKey: \"name\",\n            jsonFilePath: \"./data/planets.json\",\n            nested: {\n                homeworld: {\n                    from: \"planet\",\n                },\n                species: {\n                },\n            },\n        },\n        species: {\n            primaryKey: \"name\",\n            nested: {\n                homeworld: {\n                    from: \"planet\",\n                },\n            },\n        },\n        planet: {\n            primaryKey: \"name\",\n            nested: {\n                species: {\n                    foreignKey: \"homeworld\",\n                },\n                characters: {\n                    from: \"character\",\n                    multiple: true,\n                    parentKey: \"name\",\n                    foreignKey: \"homeworld\"\n                },\n            },\n        },\n    },\n    verbose: true,\n};\n\n//\n// Inline data to run queries against.\n//\nconst inlineData = {\n    character: characters.default,\n    species: species.default,\n    planet: planets.default,\n};\n\n//\n// Resolves MiniQL queryies.\n//\nconst inlineQueryResolver = createQueryResolver(jsonQueryResolverConfig, inlineData);\n\n//\n// Example queries that can be put in the query editor.\n//\nconst exampleQueries = [\n    require(`./queries/get-vader`).default,\n    require(`./queries/get-vader-with-homeworld`).default,\n    require(`./queries/get-vader-with-homeworld-and-species`).default,\n    require(`./queries/get-vader-with-homeworld-and-nested-characters`).default,\n    require(`./queries/get-hutt-species`).default,\n    require(`./queries/get-all-species`).default,\n    require(`./queries/get-all-species-with-homeworld`).default,\n];\n\n//\n// Creates a JSON schema for our data format.\n// This function returns a JSON schema: https://json-schema.org/understanding-json-schema/\n//\nfunction createJsonSchema() {\n    return {\n        type: \"object\",\n        properties: {\n            get: {\n                type: \"object\",\n                properties: createEntitiesSchema(),\n                additionalProperties: false,\n            },\n            additionalProperties: false,\n        },\n        additionalProperties: false,\n    };\n}\n\n//\n// Create JSON schemas for all the entities.\n// This function returns a JSON schema: https://json-schema.org/understanding-json-schema/\n//\nfunction createEntitiesSchema() {\n    const entitiesSchema = {};\n    for (const dataset of datasets) {\n        entitiesSchema[dataset.entityName] = {\n            type: \"object\",\n            properties: {\n                args: {\n                    type: \"object\",\n                    properties: {\n                        name: {\n                            type: \"string\",\n                        },\n                    },\n                    additionalProperties: false,\n                },\n                resolve: {\n                    type: \"object\",\n                    //TODO: Flesh this out further according to what can be resolved.\n                },  \n            },\n            additionalProperties: false,\n        };\n    }\n\n    return entitiesSchema;\n}\n\n//\n// Datasets that can be queried.\n//\nconst datasets = [\n    { \n        name: \"Characters\", \n        entityName: \"character\",\n        data: characters,\n    }, \n    { \n        name: \"Species\", \n        entityName: \"species\",\n        data: species,\n    }, \n    { \n        name: \"Planets\", \n        entityName: \"planet\",\n        data: planets,\n    }, \n];\n\n//\n// Renders the data tables.\n//\nfunction DataTables() {\n    const [searchText, setSearchText] = useState(\"\");\n\n    return (\n        <div className=\"h-full\">\n            <div className=\"ml-3 mt-2 flex flex-row items-center\">\n                <Search\n                    enterButton=\"Search\"\n                    placeholder=\"Enter search text\"\n                    onSearch={setSearchText}\n                    style={{\n                        width: \"400px\",\n                    }}\n                    />\n\n                {searchText !== \"\"\n                    && <Button\n                        className=\"ml-1\"\n                        icon={<CloseOutlined />}\n                        onClick={() => setSearchText(\"\")}\n                        >\n                    </Button>\n                }\n            </div>\n\n            <div className=\"m-4 h-full\">\n                <Tabs size=\"small\">\n                    {datasets.map(dataset => \n                        <TabPane tab={dataset.name} key={dataset.name}>\n                            <div className=\"pt-4 h-full overflow-auto\">\n                                <DataTable\n                                    searchText={searchText}\n                                    data={dataset.data.default}\n                                    />\n                            </div>\n                        </TabPane>\n                    )}\n                </Tabs>\n            </div>\n        </div>\n    );\n}\n\n//\n// Renders a data table.\n//\nfunction DataTable({ searchText, data }) {\n    const columnNames = Object.keys(data[0]);\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    {columnNames.map(columnName => \n                        <th key={columnName}>\n                            {columnName}\n                        </th>\n                    )}\n                </tr>\n            </thead>\n            <tbody>\n                {data\n                    .filter(filterData(searchText, columnNames))\n                    .map(record => \n                        <tr key={record.name}>\n                            {columnNames.map(columnName => \n                                <td key={`${record.name}-${columnName}`}>\n                                    {record[columnName]}\n                                </td>\n                            )}\n                        </tr>\n                    )\n                }\n            </tbody>\n        </table>\n    );\n}\n\n//\n// Helper function to filter data.\n//\nfunction filterData(searchText, columnNames) {\n    return record => {\n        if (searchText === \"\") {\n            return true;\n        }\n        else {\n            for (const columnName of columnNames) {\n                const value = record[columnName];\n                if (t(value).isString) {\n                    if (value.toLowerCase().includes(searchText.trim().toLowerCase())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    };\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.output.css';\nimport App from './app';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}